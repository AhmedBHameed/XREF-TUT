// prefix declarations
@mixin prefixed($property, $value) {
  @if $webkit == true {
    -webkit-#{$property}: #{$value};
  }

  @if $moz == true {
    -moz-#{$property}: #{$value};
  }

  @if $ms == true {
    -ms-#{$property}: #{$value};
  }

  @if $o == true {
    -o-#{$property}: #{$value};
  }

  #{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
  @if $webkit == true {
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $moz == true {
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  @if $ms == true {
    @-ms-keyframes #{$name} {
      @content;
    }
  }

  @if $o == true {
    @-o-keyframes #{$name} {
      @content;
    }
  }

  @keyframes #{$name} {
    @content;
  }
}

// Center a block element
@mixin push--auto {
    margin: { 
        left: auto;
        right: auto;
    }
}

// Used with ::before and ::after to make the element position absloute related to the parent.
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

// CSS Triangle
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false, $centralize: true){
    @if $centralize {
      @include css-triangle-centralizer($direction); 
    }
    width: 0;
    height: 0;
    @if $position {
        position: $position;
    }
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

// Centrlize css-trangle according to it's direction
@mixin css-triangle-centralizer($direction){
  @if $direction == up{
    top: 0%;
    left: 50%;
    @include prefixed(transform,translate(-50%, -100%));
  }@else if $direction == right{
    top: 50%;
    right: 0%;
    @include prefixed(transform,translate(0%, -50%));
  }@else if $direction == down{
    bottom: 0%;
    left: 50%;
    @include prefixed(transform,translate(-50%, 100%));
  }@else if $direction == left{
    top: 50%;
    left: 0%;
    @include prefixed(transform,translate(0%, -100%));
  }
  
}

// Font style
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

// Placehoder Style
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// Cut the text if exceed the limits
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    vertical-align:top;
}

// Align element
@mixin align($vertical: true, $horizontal: false, $position: relative) {
	@if $position {
    position: $position;
    display: inline-block;
	}
	@if $vertical {
		top: 50%;
	}
	@if $horizontal {
		left: 50%;
	}
	@if $vertical and $horizontal {
		 @include prefixed(transform, translate(-50%, -50%));
	} @else if $vertical {
		 @include prefixed(transform, translateY(-50%));
	} @else {
		@include prefixed(transform, translateX(-50%));
	}
}

@mixin pos($pos, $t, $r, $b, $l, $z: false, $hardware: true) {
	@if $pos == fixed and $hardware { @include hardware; }
	@if $pos { position: $pos; }
	@if $t { top: $t; }
	@if $r { right: $r; }
	@if $b { bottom: $b; }
	@if $l { left: $l; }
	@if $z { z-index: $z; }
}

@mixin hardware($backface: true, $perspective: 1000px) {
    @if $backface {
        @include prefixed(backface-visibility, hidden);
    }
    perspective: $perspective;
}

@mixin ancher($decoration: false, $color: false){
  @if $decoration { text-decoration: $decoration; }
  @if $color { color: $color; }
}

@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}
$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);

// Change scroll bar style
@mixin scrollStyle($width: false, $borderRadius: 10px, $background: rgba(255, 0, 0, 0.8), $inactive: rgba(35, 38, 78, 0.4)){
  /* Let's get this party started */
  @if $width {
      ::-webkit-scrollbar {
      width: $width;
    }
  }
  /* Track */

  @if $borderRadius {
      ::-webkit-scrollbar-track {
      @include prefixed(box-shadow, inset 0 0 6px rgba(0, 0, 0, 0.3));
      @include prefixed(border-radius, $borderRadius);
    }
  }
  /* Handle */

  @if $background {
      ::-webkit-scrollbar-thumb {
      @include prefixed(box-shadow, inset 0 0 6px rgba(0, 0, 0, 0.5));
      @include prefixed(border-radius, 10px);
      background: $background;
    }
  }
  @if $inactive {
    ::-webkit-scrollbar-thumb:window-inactive {
      background: $inactive;
    }
  }

}